# -*- coding: utf-8 -*-
"""stats project final

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19rZBx6Hvkf_dzuaeRtqlWEWQILkhUkcT
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import hmean, gmean, bernoulli, binom, norm, linregress
from sklearn.linear_model import LinearRegression
import numpy as np

# Load the CSV file
df = pd.read_csv('/content/Household energy bill data.csv')

# ---------- Central Tendency ----------
amount_paid = df['amount_paid']

# Arithmetic Mean
arithmetic_mean = amount_paid.mean()

# Harmonic Mean (ensure no zero or negative values)
if (amount_paid > 0).all():
    harmonic_mean = hmean(amount_paid)
else:
    harmonic_mean = "N/A (contains zeros or negatives)"

# Geometric Mean
if (amount_paid > 0).all():
    geometric_mean = gmean(amount_paid)
else:
    geometric_mean = "N/A (contains zeros or negatives)"

print(f"Arithmetic Mean: {arithmetic_mean}")
print(f"Harmonic Mean: {harmonic_mean}")
print(f"Geometric Mean: {geometric_mean}")

# Median and Mode
median = df['amount_paid'].median()
mode = df['amount_paid'].mode()[0]
print(f"Median: {median}")
print(f"Mode: {mode}")

# ---------- Dispersion ----------
def calculate_dispersion(data):
    return {
        "Range": np.max(data) - np.min(data),
        "Variance": np.var(data, ddof=1),
        "Standard Deviation": np.std(data, ddof=1),
        "Mean Absolute Deviation (MAD)": np.mean(np.abs(data - np.mean(data))),
        " Coefficient of Variation (CV) (%)": (np.std(data, ddof=1) / np.mean(data)) * 100
    }

amount_paid = df["amount_paid"].dropna()
dispersion_results = calculate_dispersion(amount_paid)
dispersion_df = pd.DataFrame([dispersion_results])
print(dispersion_df)
dispersion_df.to_csv("amount_paid_dispersion.csv", index=False)

# ---------- Skewness and Kurtosis ----------
skewness = amount_paid.skew()
# Remove fisher=False from kurtosis calculation
kurtosis = amount_paid.kurtosis()
position_measures = {
    "Skewness": skewness,
    "Kurtosis": kurtosis
}
position_df = pd.DataFrame([position_measures])
print(position_df)
position_df.to_csv("amount_paid_position_measures.csv", index=False)

# ---------- Quartiles and IQR ----------
Q1 = amount_paid.quantile(0.25)
Q2 = amount_paid.quantile(0.50)
Q3 = amount_paid.quantile(0.75)
IQR = Q3 - Q1

quartiles = {
    "Q1 (25th percentile)": Q1,
    "Q2 (Median / 50th percentile)": Q2,
    "Q3 (75th percentile)": Q3,
    "Interquartile Range (IQR)": IQR
}
for key, value in quartiles.items():
    print(f"{key}: {value}")

# ---------- Visualizations ----------
columns = ["amount_paid", "housearea", "ave_monthly_income"]
fig, axes = plt.subplots(1, 3, figsize=(15, 4))
for ax, col in zip(axes, columns):
    ax.hist(df[col], bins=30, density=True, color="blue", alpha=0.6, edgecolor="black")
    ax.set_title(f"Histogram of {col} (Density)")
    ax.set_xlabel(col)
    ax.set_ylabel("Density")
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 6))
sns.histplot(df['amount_paid'], kde=True, bins=20, color="skyblue")
plt.title("Distribution of Electricity Bills")
plt.xlabel("Amount Paid")
plt.ylabel("Frequency")
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x=df['amount_paid'], color="lightcoral")
plt.title("Boxplot of Electricity Bills")
plt.xlabel("Amount Paid")
plt.show()

plt.figure(figsize=(8, 6))
sns.barplot(x='is_urban', y='amount_paid', data=df, palette="muted", ci=None)
plt.title("Average Electricity Bill: Urban vs Rural")
plt.xlabel(" Rural (0) vs Urban (1)")
plt.ylabel("Average Amount Paid")
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x='housearea', y='amount_paid', data=df, hue='is_urban', palette="coolwarm")
plt.title("House Area vs Electricity Bill")
plt.xlabel("House Area (sq. ft.)")
plt.ylabel("Amount Paid")
plt.legend(title="Urban (1) vs Rural (0)")
plt.show()

# ---------- Conditional Probability and Bayes Rule ----------
df['HighBill'] = df['amount_paid'] > 600
p_high_given_urban = df[(df['HighBill']) & (df['is_urban'] == 1)].shape[0] / df[df['is_urban'] == 1].shape[0]
print("P(HighBill | Urban):", p_high_given_urban)

p_urban = (df['is_urban'] == 1).mean()
p_high = df['HighBill'].mean()
p_urban_given_high = (p_high_given_urban * p_urban) / p_high
print("P(Urban | HighBill):", p_urban_given_high)

# ---------- Bernoulli, Binomial, Normal Distributions ----------
highbill_data = df['HighBill'].astype(int)
p = highbill_data.mean()
x = [0, 1]
bern_probs = bernoulli.pmf(x, p)
plt.bar(x, bern_probs)
plt.title('Bernoulli Distribution of HighBill')
plt.xticks([0, 1], ['Low', 'High'])
plt.ylabel('Probability')
plt.show()

n = 10
k = np.arange(0, n+1)
binom_probs = binom.pmf(k, n, p)
plt.bar(k, binom_probs)
plt.title('Binomial Distribution (n=10, p=HighBill)')
plt.xlabel('Number of High Bills')
plt.ylabel('Probability')
plt.show()

bills = df['amount_paid'].dropna()
mu, sigma = bills.mean(), bills.std()
x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)
pdf = norm.pdf(x, mu, sigma)
plt.plot(x, pdf)
plt.title('Normal Distribution of Amount Paid')
plt.xlabel('Amount Paid')
plt.ylabel('Density')
plt.show()

# ---------- Correlation & Regression ----------
correlation_matrix = df.corr(numeric_only=True)
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

X = df[['ave_monthly_income']]
y = df['amount_paid']
model = LinearRegression()
model.fit(X, y)
slope = model.coef_[0]
intercept = model.intercept_
regression_eq = f"amount_paid = {intercept:.2f} + {slope:.4f} * ave_monthly_income"

x_vals = np.linspace(X.min().values[0], X.max().values[0], 100).reshape(-1, 1)
y_vals = model.predict(x_vals)
plt.figure(figsize=(8, 6))
sns.scatterplot(x='ave_monthly_income', y='amount_paid', data=df)
plt.plot(x_vals, y_vals, color='red', label='Regression Line')
plt.title('Regression: amount_paid vs ave_monthly_income')
plt.xlabel('Average Monthly Income')
plt.ylabel('Amount Paid')
plt.legend()
plt.text(X.min().values[0], y.max(), regression_eq, fontsize=12, color='red')
plt.show()

correlation = correlation_matrix.loc['ave_monthly_income', 'amount_paid']
correlation_type = "positive" if correlation > 0 else "negative" if correlation < 0 else "no correlation"
print(f"Correlation Coefficient: {correlation:.4f} ({correlation_type})")

# ---------- Hypothesis Testing ----------
slope, intercept, r_value, p_value, std_err = linregress(df['ave_monthly_income'], df['amount_paid'])
alpha = 0.05
if p_value < alpha:
    decision = "Reject the null hypothesis (H₀). There is a significant linear relationship."
    error_type = "If this decision is incorrect, it would be a Type I Error (false positive)."
else:
    decision = "Fail to reject the null hypothesis (H₀). There is no significant linear relationship."
    error_type = "If this decision is incorrect, it would be a Type II Error (false negative)."

print("Hypothesis Testing Results")
print("--------------------------")
print(f"Slope: {slope:.6f}")
print(f"p-value: {p_value:.4f}")
print(f"Decision: {decision}")
print(f"Possible Error Type: {error_type}")

# ------------------ F-test & ANOVA ------------------
# Import necessary modules
import statsmodels.formula.api as smf  # For ols
import statsmodels.stats.api as sms   # For stats

# One-way ANOVA: amount_paid ~ is_urban
anova_model = smf.ols('amount_paid ~ C(is_urban)', data=df).fit()
anova_table = sms.anova_lm(anova_model, typ=2)
print("----- ANOVA Results -----")
print(anova_table)

# Boxplot to visualize differences
plt.figure(figsize=(8, 6))
sns.boxplot(x='is_urban', y='amount_paid', data=df, palette='Set2')
plt.title("ANOVA - Amount Paid by Urban vs Rural")
plt.xlabel("is_urban (0 = Rural, 1 = Urban)")
plt.ylabel("Amount Paid")
plt.show()

# ------------------ Chi-square Test ------------------
# Import stats module if not already imported
from scipy import stats

# Create HighBill column
df['HighBill'] = df['amount_paid'] > 600

# Contingency Table
contingency_table = pd.crosstab(df['HighBill'], df['is_urban'])
chi2, p_chi2, dof, expected = stats.chi2_contingency(contingency_table)

print("\n----- Chi-Square Test Results -----")
print(f"Chi-square Statistic: {chi2:.4f}")
print(f"p-value: {p_chi2:.4e}")
print(f"Degrees of Freedom: {dof}")
print("Expected Frequencies:\n", expected)
print("Observed Frequencies:\n", contingency_table)

# Heatmap of observed vs expected
plt.figure(figsize=(8, 6))
sns.heatmap(contingency_table, annot=True, fmt="d", cmap="YlGnBu")
plt.title("Observed Frequencies: HighBill vs Urban")
plt.xlabel("is_urban (0 = Rural, 1 = Urban)")
plt.ylabel("High Bill (False = 0, True = 1)")
plt.show()